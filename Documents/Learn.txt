https://www.bilibili.com/video/av28871471?p=25 Django 接口

https://www.bilibili.com/video/BV1KE41117XV?p=33 flutter
7. 节流
    #"DEFAULT_THROTTLE_CLASSES":['app01.utils.throttle.VisitTrottle'],
    "DEFAULT_THROTTLE_RATES": {
        "Luffy":'4/m',
        "LuffyUser":'2/m',
    }

    class Visit3Throttle (SimpleRateThrottle):
    scope = "LuffyUser"

    def get_cache_key(self,request,view):
        return request.user.username

class Visit2Throttle (SimpleRateThrottle):
    scope = "Luffy"

    def get_cache_key(self,request,view):
        return self.get_ident(request)

throttle_classes = [Visit3Throttle]

6. 权限 ： 写这么个类
class SVIPPermission(BasePermission):
    def has_permission(self,request,view):
        if request.user.user_type != 3 :
            return False
        return True
然后view里面可以加上 ：
    permission_classes = [SVIPPermission,]

5. 认证； ，首先，写这么个类：
class Authtication(BaseAuthentication):
    def authenticate(self, request):
        token = request._request.GET.get('token')
        token_obj = models.UserToken.objects.filter(token=token).first()
        if not token_obj:
            raise exceptions.AuthenticationFailed('用户认证失败')
        #在restframework内部会将两个字段赋值给request，以供后面使用。
        return (token_obj.user,token_obj)
        #return None (下一个认证执行，我不管了。)
        #raise exceptions.AuthenticationFailed('用户认证失败') 认证失败
        #return (token_obj.user,token_obj) 认证通过，返回认证的用户信息和token信息。request.user request.auth
        

    def authenticate_header(self,val):
        pass

 然后，在view里面，把这个加上。
  authentication_classes = [Authtication,]

  或者全局设置：
    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES":['app01.utils.auth.FirstAuthtication' , 'app01.utils.auth.Authtication',],
        "UNAUTHENTICATED_USER": None, # 匿名 ， request.user = none 
        "UNAUTHENTICATED_TOKEN": None, # 匿名 ， request.auth = none 
    }


  不想用的api， 顶上个这个就行 authentication_classes = []
    内置的认证类，基本用不上。



4. 
class UserInfo(models.Model):
    user_type_choices = (
        (1,'普通用户'),
        (2,'VIP用户'),
        (3,'VIP中P用户'),
    )
    user_type = models.IntegerField(choices = user_type_choices)
    username = models.CharField(max_length = 32 , unique=True)
    password = models.CharField(max_length = 64)

class UserToken(models.Model):
    user = models.OneToOneField(to='UserInfo', on_delete = models.CASCADE) # 这里必须加上  on_delete , 
    token = models.CharField(max_length=64)

python manage.py makemigrations
python manage.py migrate

3. 认证。
authentication_classes = [MyAuthentication]
class MyAuthentication(object):
    def authenticate(self,request):
        token = request._request.GET.get('token')
        if not token :
            raise exceptions.AuthenticationFailed("认证失败鸟！")
        return ('Alex',None)
    def authenticate_header(self,val):
        pass


2. RESTful API规范
   1. HTTPS
   2. api.easypass.com 或者 easypass.com/api/ 
   3. 一般带个版本，v1，v2之类的。
   4. 面向资源，所以用名词作为url名
   5. method 
        get 得到资源 查
        post 新建资源 增
        put 更新资源（全部更新） 改
        patch 更新资源（局部更新） 改
        delete 删除资源 删
   6. URL上加参数作为搜索条件。
   7. 状态码
   8. 当4XX的状态时候，error 内容为报错信息。
   9. 不同method时候的一些小标准（好像没用），比如创建后返回完整资源数据。什么什么的。
   10. 单体里面带着URL方便访问。

决定重新开始学习.
1.django-admin startproject psite
python manage.py startapp app01

URL: url(r'students/', views.StudentsView.as_view()),
View:
class StudentsView(View): #实现请求中事先或者事后做点什么.
    def dispatch(self, request , *args, **kwargs):
        print('before')
        ret = super(StudentsView,self).dispatch(request , *args , **kwargs)
        print('after')
        return ret 

    def get(self,request , *args, **kwargs):
        user_list = ["dddd","aaaaa"]
        rt = LHKit.LHResult()
        rt['data'] = user_list
        return HttpResponse( json.dumps( rt ) )
    def post(self,request , *args, **kwargs):
        user_list = ["Post","Post"]
        rt = LHKit.LHResult()
        rt['data'] = user_list
        return HttpResponse( json.dumps( rt ) )
@csrf_except # 打开'django.middleware.csrf.CsrfViewMiddleware'的时候,装饰者不需要认证.
@csrf_protect # 关闭'django.middleware.csrf.CsrfViewMiddleware'的时候,装饰着需要认证.

CBV模式下免除验证
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt,csrf_protect

    @method_decorator(csrf_exempt)
    def dispatch(self, request , *args, **kwargs):
        print('before')
        ret = super(StudentsView,self).dispatch(request , *args , **kwargs)
        print('after')
        return ret 
或者
@method_decorator(csrf_exempt, name = "dispatch")

